// source: survey/v1/survey.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var survey_v1_survey_page_pb = require('../../survey/v1/survey_page_pb.js');
goog.object.extend(proto, survey_v1_survey_page_pb);
goog.exportSymbol('proto.survey.v1.Survey', null, global);
goog.exportSymbol('proto.survey.v1.SurveyCreateRequest', null, global);
goog.exportSymbol('proto.survey.v1.SurveyCreateResponse', null, global);
goog.exportSymbol('proto.survey.v1.SurveyCreateUpdate', null, global);
goog.exportSymbol('proto.survey.v1.SurveyDeleteRequest', null, global);
goog.exportSymbol('proto.survey.v1.SurveyDeleteResponse', null, global);
goog.exportSymbol('proto.survey.v1.SurveyGetAllRequest', null, global);
goog.exportSymbol('proto.survey.v1.SurveyGetAllResponse', null, global);
goog.exportSymbol('proto.survey.v1.SurveyGetOneRequest', null, global);
goog.exportSymbol('proto.survey.v1.SurveyGetOneResponse', null, global);
goog.exportSymbol('proto.survey.v1.SurveyType', null, global);
goog.exportSymbol('proto.survey.v1.SurveyUpdateRequest', null, global);
goog.exportSymbol('proto.survey.v1.SurveyUpdateResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.Survey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.survey.v1.Survey.repeatedFields_, null);
};
goog.inherits(proto.survey.v1.Survey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.Survey.displayName = 'proto.survey.v1.Survey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.SurveyCreateUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.SurveyCreateUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.SurveyCreateUpdate.displayName = 'proto.survey.v1.SurveyCreateUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.SurveyGetOneRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.SurveyGetOneRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.SurveyGetOneRequest.displayName = 'proto.survey.v1.SurveyGetOneRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.SurveyGetOneResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.SurveyGetOneResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.SurveyGetOneResponse.displayName = 'proto.survey.v1.SurveyGetOneResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.SurveyGetAllRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.SurveyGetAllRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.SurveyGetAllRequest.displayName = 'proto.survey.v1.SurveyGetAllRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.SurveyGetAllResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.survey.v1.SurveyGetAllResponse.repeatedFields_, null);
};
goog.inherits(proto.survey.v1.SurveyGetAllResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.SurveyGetAllResponse.displayName = 'proto.survey.v1.SurveyGetAllResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.SurveyCreateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.SurveyCreateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.SurveyCreateRequest.displayName = 'proto.survey.v1.SurveyCreateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.SurveyCreateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.SurveyCreateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.SurveyCreateResponse.displayName = 'proto.survey.v1.SurveyCreateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.SurveyUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.SurveyUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.SurveyUpdateRequest.displayName = 'proto.survey.v1.SurveyUpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.SurveyUpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.SurveyUpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.SurveyUpdateResponse.displayName = 'proto.survey.v1.SurveyUpdateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.SurveyDeleteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.SurveyDeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.SurveyDeleteRequest.displayName = 'proto.survey.v1.SurveyDeleteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.SurveyDeleteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.SurveyDeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.SurveyDeleteResponse.displayName = 'proto.survey.v1.SurveyDeleteResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.survey.v1.Survey.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.Survey.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.Survey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.Survey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.Survey.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    datetimeCreated: (f = msg.getDatetimeCreated()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    datetimeUpdated: (f = msg.getDatetimeUpdated()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    organizationId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    name: jspb.Message.getFieldWithDefault(msg, 5, ""),
    type: jspb.Message.getFieldWithDefault(msg, 6, 0),
    pagesList: jspb.Message.toObjectList(msg.getPagesList(),
    survey_v1_survey_page_pb.SurveyPage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.Survey}
 */
proto.survey.v1.Survey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.Survey;
  return proto.survey.v1.Survey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.Survey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.Survey}
 */
proto.survey.v1.Survey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDatetimeCreated(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDatetimeUpdated(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrganizationId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = /** @type {!proto.survey.v1.SurveyType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 7:
      var value = new survey_v1_survey_page_pb.SurveyPage;
      reader.readMessage(value,survey_v1_survey_page_pb.SurveyPage.deserializeBinaryFromReader);
      msg.addPages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.Survey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.Survey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.Survey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.Survey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDatetimeCreated();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getDatetimeUpdated();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getOrganizationId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getPagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      survey_v1_survey_page_pb.SurveyPage.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.survey.v1.Survey.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.v1.Survey} returns this
 */
proto.survey.v1.Survey.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp datetime_created = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.survey.v1.Survey.prototype.getDatetimeCreated = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.survey.v1.Survey} returns this
*/
proto.survey.v1.Survey.prototype.setDatetimeCreated = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.survey.v1.Survey} returns this
 */
proto.survey.v1.Survey.prototype.clearDatetimeCreated = function() {
  return this.setDatetimeCreated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.survey.v1.Survey.prototype.hasDatetimeCreated = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp datetime_updated = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.survey.v1.Survey.prototype.getDatetimeUpdated = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.survey.v1.Survey} returns this
*/
proto.survey.v1.Survey.prototype.setDatetimeUpdated = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.survey.v1.Survey} returns this
 */
proto.survey.v1.Survey.prototype.clearDatetimeUpdated = function() {
  return this.setDatetimeUpdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.survey.v1.Survey.prototype.hasDatetimeUpdated = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 organization_id = 4;
 * @return {number}
 */
proto.survey.v1.Survey.prototype.getOrganizationId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.v1.Survey} returns this
 */
proto.survey.v1.Survey.prototype.setOrganizationId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.survey.v1.Survey.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.survey.v1.Survey} returns this
 */
proto.survey.v1.Survey.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional SurveyType type = 6;
 * @return {!proto.survey.v1.SurveyType}
 */
proto.survey.v1.Survey.prototype.getType = function() {
  return /** @type {!proto.survey.v1.SurveyType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.survey.v1.SurveyType} value
 * @return {!proto.survey.v1.Survey} returns this
 */
proto.survey.v1.Survey.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * repeated SurveyPage pages = 7;
 * @return {!Array<!proto.survey.v1.SurveyPage>}
 */
proto.survey.v1.Survey.prototype.getPagesList = function() {
  return /** @type{!Array<!proto.survey.v1.SurveyPage>} */ (
    jspb.Message.getRepeatedWrapperField(this, survey_v1_survey_page_pb.SurveyPage, 7));
};


/**
 * @param {!Array<!proto.survey.v1.SurveyPage>} value
 * @return {!proto.survey.v1.Survey} returns this
*/
proto.survey.v1.Survey.prototype.setPagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.survey.v1.SurveyPage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.survey.v1.SurveyPage}
 */
proto.survey.v1.Survey.prototype.addPages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.survey.v1.SurveyPage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.survey.v1.Survey} returns this
 */
proto.survey.v1.Survey.prototype.clearPagesList = function() {
  return this.setPagesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.SurveyCreateUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.SurveyCreateUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.SurveyCreateUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyCreateUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    organizationId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    name: jspb.Message.getFieldWithDefault(msg, 5, ""),
    type: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.SurveyCreateUpdate}
 */
proto.survey.v1.SurveyCreateUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.SurveyCreateUpdate;
  return proto.survey.v1.SurveyCreateUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.SurveyCreateUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.SurveyCreateUpdate}
 */
proto.survey.v1.SurveyCreateUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrganizationId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = /** @type {!proto.survey.v1.SurveyType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.SurveyCreateUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.SurveyCreateUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.SurveyCreateUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyCreateUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganizationId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional int32 organization_id = 4;
 * @return {number}
 */
proto.survey.v1.SurveyCreateUpdate.prototype.getOrganizationId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.v1.SurveyCreateUpdate} returns this
 */
proto.survey.v1.SurveyCreateUpdate.prototype.setOrganizationId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.survey.v1.SurveyCreateUpdate.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.survey.v1.SurveyCreateUpdate} returns this
 */
proto.survey.v1.SurveyCreateUpdate.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional SurveyType type = 6;
 * @return {!proto.survey.v1.SurveyType}
 */
proto.survey.v1.SurveyCreateUpdate.prototype.getType = function() {
  return /** @type {!proto.survey.v1.SurveyType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.survey.v1.SurveyType} value
 * @return {!proto.survey.v1.SurveyCreateUpdate} returns this
 */
proto.survey.v1.SurveyCreateUpdate.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.SurveyGetOneRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.SurveyGetOneRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.SurveyGetOneRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyGetOneRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    withPage: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    withQuestion: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    withQuestionOption: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    withQuestionChoice: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.SurveyGetOneRequest}
 */
proto.survey.v1.SurveyGetOneRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.SurveyGetOneRequest;
  return proto.survey.v1.SurveyGetOneRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.SurveyGetOneRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.SurveyGetOneRequest}
 */
proto.survey.v1.SurveyGetOneRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithPage(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithQuestion(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithQuestionOption(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithQuestionChoice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.SurveyGetOneRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.SurveyGetOneRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.SurveyGetOneRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyGetOneRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getWithPage();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getWithQuestion();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getWithQuestionOption();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getWithQuestionChoice();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.survey.v1.SurveyGetOneRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.v1.SurveyGetOneRequest} returns this
 */
proto.survey.v1.SurveyGetOneRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool with_page = 2;
 * @return {boolean}
 */
proto.survey.v1.SurveyGetOneRequest.prototype.getWithPage = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.survey.v1.SurveyGetOneRequest} returns this
 */
proto.survey.v1.SurveyGetOneRequest.prototype.setWithPage = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool with_question = 3;
 * @return {boolean}
 */
proto.survey.v1.SurveyGetOneRequest.prototype.getWithQuestion = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.survey.v1.SurveyGetOneRequest} returns this
 */
proto.survey.v1.SurveyGetOneRequest.prototype.setWithQuestion = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool with_question_option = 4;
 * @return {boolean}
 */
proto.survey.v1.SurveyGetOneRequest.prototype.getWithQuestionOption = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.survey.v1.SurveyGetOneRequest} returns this
 */
proto.survey.v1.SurveyGetOneRequest.prototype.setWithQuestionOption = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool with_question_choice = 5;
 * @return {boolean}
 */
proto.survey.v1.SurveyGetOneRequest.prototype.getWithQuestionChoice = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.survey.v1.SurveyGetOneRequest} returns this
 */
proto.survey.v1.SurveyGetOneRequest.prototype.setWithQuestionChoice = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.SurveyGetOneResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.SurveyGetOneResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.SurveyGetOneResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyGetOneResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    survey: (f = msg.getSurvey()) && proto.survey.v1.Survey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.SurveyGetOneResponse}
 */
proto.survey.v1.SurveyGetOneResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.SurveyGetOneResponse;
  return proto.survey.v1.SurveyGetOneResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.SurveyGetOneResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.SurveyGetOneResponse}
 */
proto.survey.v1.SurveyGetOneResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.survey.v1.Survey;
      reader.readMessage(value,proto.survey.v1.Survey.deserializeBinaryFromReader);
      msg.setSurvey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.SurveyGetOneResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.SurveyGetOneResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.SurveyGetOneResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyGetOneResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSurvey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.survey.v1.Survey.serializeBinaryToWriter
    );
  }
};


/**
 * optional Survey survey = 1;
 * @return {?proto.survey.v1.Survey}
 */
proto.survey.v1.SurveyGetOneResponse.prototype.getSurvey = function() {
  return /** @type{?proto.survey.v1.Survey} */ (
    jspb.Message.getWrapperField(this, proto.survey.v1.Survey, 1));
};


/**
 * @param {?proto.survey.v1.Survey|undefined} value
 * @return {!proto.survey.v1.SurveyGetOneResponse} returns this
*/
proto.survey.v1.SurveyGetOneResponse.prototype.setSurvey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.survey.v1.SurveyGetOneResponse} returns this
 */
proto.survey.v1.SurveyGetOneResponse.prototype.clearSurvey = function() {
  return this.setSurvey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.survey.v1.SurveyGetOneResponse.prototype.hasSurvey = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.SurveyGetAllRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.SurveyGetAllRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.SurveyGetAllRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyGetAllRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organizationId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    filterType: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.SurveyGetAllRequest}
 */
proto.survey.v1.SurveyGetAllRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.SurveyGetAllRequest;
  return proto.survey.v1.SurveyGetAllRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.SurveyGetAllRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.SurveyGetAllRequest}
 */
proto.survey.v1.SurveyGetAllRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrganizationId(value);
      break;
    case 2:
      var value = /** @type {!proto.survey.v1.SurveyType} */ (reader.readEnum());
      msg.setFilterType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.SurveyGetAllRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.SurveyGetAllRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.SurveyGetAllRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyGetAllRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganizationId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getFilterType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional int32 organization_id = 1;
 * @return {number}
 */
proto.survey.v1.SurveyGetAllRequest.prototype.getOrganizationId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.v1.SurveyGetAllRequest} returns this
 */
proto.survey.v1.SurveyGetAllRequest.prototype.setOrganizationId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional SurveyType filter_type = 2;
 * @return {!proto.survey.v1.SurveyType}
 */
proto.survey.v1.SurveyGetAllRequest.prototype.getFilterType = function() {
  return /** @type {!proto.survey.v1.SurveyType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.survey.v1.SurveyType} value
 * @return {!proto.survey.v1.SurveyGetAllRequest} returns this
 */
proto.survey.v1.SurveyGetAllRequest.prototype.setFilterType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.survey.v1.SurveyGetAllResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.SurveyGetAllResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.SurveyGetAllResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.SurveyGetAllResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyGetAllResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    surveysList: jspb.Message.toObjectList(msg.getSurveysList(),
    proto.survey.v1.Survey.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.SurveyGetAllResponse}
 */
proto.survey.v1.SurveyGetAllResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.SurveyGetAllResponse;
  return proto.survey.v1.SurveyGetAllResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.SurveyGetAllResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.SurveyGetAllResponse}
 */
proto.survey.v1.SurveyGetAllResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.survey.v1.Survey;
      reader.readMessage(value,proto.survey.v1.Survey.deserializeBinaryFromReader);
      msg.addSurveys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.SurveyGetAllResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.SurveyGetAllResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.SurveyGetAllResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyGetAllResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSurveysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.survey.v1.Survey.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Survey surveys = 1;
 * @return {!Array<!proto.survey.v1.Survey>}
 */
proto.survey.v1.SurveyGetAllResponse.prototype.getSurveysList = function() {
  return /** @type{!Array<!proto.survey.v1.Survey>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.survey.v1.Survey, 1));
};


/**
 * @param {!Array<!proto.survey.v1.Survey>} value
 * @return {!proto.survey.v1.SurveyGetAllResponse} returns this
*/
proto.survey.v1.SurveyGetAllResponse.prototype.setSurveysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.survey.v1.Survey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.survey.v1.Survey}
 */
proto.survey.v1.SurveyGetAllResponse.prototype.addSurveys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.survey.v1.Survey, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.survey.v1.SurveyGetAllResponse} returns this
 */
proto.survey.v1.SurveyGetAllResponse.prototype.clearSurveysList = function() {
  return this.setSurveysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.SurveyCreateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.SurveyCreateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.SurveyCreateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyCreateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    survey: (f = msg.getSurvey()) && proto.survey.v1.SurveyCreateUpdate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.SurveyCreateRequest}
 */
proto.survey.v1.SurveyCreateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.SurveyCreateRequest;
  return proto.survey.v1.SurveyCreateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.SurveyCreateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.SurveyCreateRequest}
 */
proto.survey.v1.SurveyCreateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.survey.v1.SurveyCreateUpdate;
      reader.readMessage(value,proto.survey.v1.SurveyCreateUpdate.deserializeBinaryFromReader);
      msg.setSurvey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.SurveyCreateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.SurveyCreateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.SurveyCreateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyCreateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSurvey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.survey.v1.SurveyCreateUpdate.serializeBinaryToWriter
    );
  }
};


/**
 * optional SurveyCreateUpdate survey = 1;
 * @return {?proto.survey.v1.SurveyCreateUpdate}
 */
proto.survey.v1.SurveyCreateRequest.prototype.getSurvey = function() {
  return /** @type{?proto.survey.v1.SurveyCreateUpdate} */ (
    jspb.Message.getWrapperField(this, proto.survey.v1.SurveyCreateUpdate, 1));
};


/**
 * @param {?proto.survey.v1.SurveyCreateUpdate|undefined} value
 * @return {!proto.survey.v1.SurveyCreateRequest} returns this
*/
proto.survey.v1.SurveyCreateRequest.prototype.setSurvey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.survey.v1.SurveyCreateRequest} returns this
 */
proto.survey.v1.SurveyCreateRequest.prototype.clearSurvey = function() {
  return this.setSurvey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.survey.v1.SurveyCreateRequest.prototype.hasSurvey = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.SurveyCreateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.SurveyCreateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.SurveyCreateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyCreateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    survey: (f = msg.getSurvey()) && proto.survey.v1.Survey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.SurveyCreateResponse}
 */
proto.survey.v1.SurveyCreateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.SurveyCreateResponse;
  return proto.survey.v1.SurveyCreateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.SurveyCreateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.SurveyCreateResponse}
 */
proto.survey.v1.SurveyCreateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.survey.v1.Survey;
      reader.readMessage(value,proto.survey.v1.Survey.deserializeBinaryFromReader);
      msg.setSurvey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.SurveyCreateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.SurveyCreateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.SurveyCreateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyCreateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSurvey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.survey.v1.Survey.serializeBinaryToWriter
    );
  }
};


/**
 * optional Survey survey = 1;
 * @return {?proto.survey.v1.Survey}
 */
proto.survey.v1.SurveyCreateResponse.prototype.getSurvey = function() {
  return /** @type{?proto.survey.v1.Survey} */ (
    jspb.Message.getWrapperField(this, proto.survey.v1.Survey, 1));
};


/**
 * @param {?proto.survey.v1.Survey|undefined} value
 * @return {!proto.survey.v1.SurveyCreateResponse} returns this
*/
proto.survey.v1.SurveyCreateResponse.prototype.setSurvey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.survey.v1.SurveyCreateResponse} returns this
 */
proto.survey.v1.SurveyCreateResponse.prototype.clearSurvey = function() {
  return this.setSurvey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.survey.v1.SurveyCreateResponse.prototype.hasSurvey = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.SurveyUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.SurveyUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.SurveyUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyUpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    survey: (f = msg.getSurvey()) && proto.survey.v1.SurveyCreateUpdate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.SurveyUpdateRequest}
 */
proto.survey.v1.SurveyUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.SurveyUpdateRequest;
  return proto.survey.v1.SurveyUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.SurveyUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.SurveyUpdateRequest}
 */
proto.survey.v1.SurveyUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.survey.v1.SurveyCreateUpdate;
      reader.readMessage(value,proto.survey.v1.SurveyCreateUpdate.deserializeBinaryFromReader);
      msg.setSurvey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.SurveyUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.SurveyUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.SurveyUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSurvey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.survey.v1.SurveyCreateUpdate.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.survey.v1.SurveyUpdateRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.v1.SurveyUpdateRequest} returns this
 */
proto.survey.v1.SurveyUpdateRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional SurveyCreateUpdate survey = 2;
 * @return {?proto.survey.v1.SurveyCreateUpdate}
 */
proto.survey.v1.SurveyUpdateRequest.prototype.getSurvey = function() {
  return /** @type{?proto.survey.v1.SurveyCreateUpdate} */ (
    jspb.Message.getWrapperField(this, proto.survey.v1.SurveyCreateUpdate, 2));
};


/**
 * @param {?proto.survey.v1.SurveyCreateUpdate|undefined} value
 * @return {!proto.survey.v1.SurveyUpdateRequest} returns this
*/
proto.survey.v1.SurveyUpdateRequest.prototype.setSurvey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.survey.v1.SurveyUpdateRequest} returns this
 */
proto.survey.v1.SurveyUpdateRequest.prototype.clearSurvey = function() {
  return this.setSurvey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.survey.v1.SurveyUpdateRequest.prototype.hasSurvey = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.SurveyUpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.SurveyUpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.SurveyUpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyUpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    survey: (f = msg.getSurvey()) && proto.survey.v1.Survey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.SurveyUpdateResponse}
 */
proto.survey.v1.SurveyUpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.SurveyUpdateResponse;
  return proto.survey.v1.SurveyUpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.SurveyUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.SurveyUpdateResponse}
 */
proto.survey.v1.SurveyUpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.survey.v1.Survey;
      reader.readMessage(value,proto.survey.v1.Survey.deserializeBinaryFromReader);
      msg.setSurvey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.SurveyUpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.SurveyUpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.SurveyUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyUpdateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSurvey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.survey.v1.Survey.serializeBinaryToWriter
    );
  }
};


/**
 * optional Survey survey = 1;
 * @return {?proto.survey.v1.Survey}
 */
proto.survey.v1.SurveyUpdateResponse.prototype.getSurvey = function() {
  return /** @type{?proto.survey.v1.Survey} */ (
    jspb.Message.getWrapperField(this, proto.survey.v1.Survey, 1));
};


/**
 * @param {?proto.survey.v1.Survey|undefined} value
 * @return {!proto.survey.v1.SurveyUpdateResponse} returns this
*/
proto.survey.v1.SurveyUpdateResponse.prototype.setSurvey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.survey.v1.SurveyUpdateResponse} returns this
 */
proto.survey.v1.SurveyUpdateResponse.prototype.clearSurvey = function() {
  return this.setSurvey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.survey.v1.SurveyUpdateResponse.prototype.hasSurvey = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.SurveyDeleteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.SurveyDeleteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.SurveyDeleteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyDeleteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.SurveyDeleteRequest}
 */
proto.survey.v1.SurveyDeleteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.SurveyDeleteRequest;
  return proto.survey.v1.SurveyDeleteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.SurveyDeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.SurveyDeleteRequest}
 */
proto.survey.v1.SurveyDeleteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.SurveyDeleteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.SurveyDeleteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.SurveyDeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyDeleteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.survey.v1.SurveyDeleteRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.v1.SurveyDeleteRequest} returns this
 */
proto.survey.v1.SurveyDeleteRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.SurveyDeleteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.SurveyDeleteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.SurveyDeleteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyDeleteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    survey: (f = msg.getSurvey()) && proto.survey.v1.Survey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.SurveyDeleteResponse}
 */
proto.survey.v1.SurveyDeleteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.SurveyDeleteResponse;
  return proto.survey.v1.SurveyDeleteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.SurveyDeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.SurveyDeleteResponse}
 */
proto.survey.v1.SurveyDeleteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.survey.v1.Survey;
      reader.readMessage(value,proto.survey.v1.Survey.deserializeBinaryFromReader);
      msg.setSurvey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.SurveyDeleteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.SurveyDeleteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.SurveyDeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyDeleteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSurvey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.survey.v1.Survey.serializeBinaryToWriter
    );
  }
};


/**
 * optional Survey survey = 1;
 * @return {?proto.survey.v1.Survey}
 */
proto.survey.v1.SurveyDeleteResponse.prototype.getSurvey = function() {
  return /** @type{?proto.survey.v1.Survey} */ (
    jspb.Message.getWrapperField(this, proto.survey.v1.Survey, 1));
};


/**
 * @param {?proto.survey.v1.Survey|undefined} value
 * @return {!proto.survey.v1.SurveyDeleteResponse} returns this
*/
proto.survey.v1.SurveyDeleteResponse.prototype.setSurvey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.survey.v1.SurveyDeleteResponse} returns this
 */
proto.survey.v1.SurveyDeleteResponse.prototype.clearSurvey = function() {
  return this.setSurvey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.survey.v1.SurveyDeleteResponse.prototype.hasSurvey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.survey.v1.SurveyType = {
  SURVEY_TYPE_ALL_UNSPECIFIED: 0,
  SURVEY_TYPE_FORM: 1,
  SURVEY_TYPE_QUIZ: 2
};

goog.object.extend(exports, proto.survey.v1);
