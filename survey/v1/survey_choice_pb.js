// source: survey/v1/survey_choice.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.survey.v1.ChoiceCreateRequest', null, global);
goog.exportSymbol('proto.survey.v1.ChoiceCreateResponse', null, global);
goog.exportSymbol('proto.survey.v1.ChoiceDeleteRequest', null, global);
goog.exportSymbol('proto.survey.v1.ChoiceDeleteResponse', null, global);
goog.exportSymbol('proto.survey.v1.ChoiceGetAllRequest', null, global);
goog.exportSymbol('proto.survey.v1.ChoiceGetAllResponse', null, global);
goog.exportSymbol('proto.survey.v1.ChoiceUpdateRequest', null, global);
goog.exportSymbol('proto.survey.v1.ChoiceUpdateResponse', null, global);
goog.exportSymbol('proto.survey.v1.SurveyChoice', null, global);
goog.exportSymbol('proto.survey.v1.SurveyChoiceCreateUpdate', null, global);
goog.exportSymbol('proto.survey.v1.SurveyChoiceOption', null, global);
goog.exportSymbol('proto.survey.v1.SurveyChoiceOptionMode', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.SurveyChoice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.SurveyChoice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.SurveyChoice.displayName = 'proto.survey.v1.SurveyChoice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.SurveyChoiceCreateUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.SurveyChoiceCreateUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.SurveyChoiceCreateUpdate.displayName = 'proto.survey.v1.SurveyChoiceCreateUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.SurveyChoiceOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.SurveyChoiceOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.SurveyChoiceOption.displayName = 'proto.survey.v1.SurveyChoiceOption';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.ChoiceGetAllRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.ChoiceGetAllRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.ChoiceGetAllRequest.displayName = 'proto.survey.v1.ChoiceGetAllRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.ChoiceGetAllResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.survey.v1.ChoiceGetAllResponse.repeatedFields_, null);
};
goog.inherits(proto.survey.v1.ChoiceGetAllResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.ChoiceGetAllResponse.displayName = 'proto.survey.v1.ChoiceGetAllResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.ChoiceCreateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.ChoiceCreateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.ChoiceCreateRequest.displayName = 'proto.survey.v1.ChoiceCreateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.ChoiceCreateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.ChoiceCreateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.ChoiceCreateResponse.displayName = 'proto.survey.v1.ChoiceCreateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.ChoiceUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.ChoiceUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.ChoiceUpdateRequest.displayName = 'proto.survey.v1.ChoiceUpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.ChoiceUpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.ChoiceUpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.ChoiceUpdateResponse.displayName = 'proto.survey.v1.ChoiceUpdateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.ChoiceDeleteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.ChoiceDeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.ChoiceDeleteRequest.displayName = 'proto.survey.v1.ChoiceDeleteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.ChoiceDeleteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.ChoiceDeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.ChoiceDeleteResponse.displayName = 'proto.survey.v1.ChoiceDeleteResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.SurveyChoice.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.SurveyChoice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.SurveyChoice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyChoice.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    surveyQuestionId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    choice: jspb.Message.getFieldWithDefault(msg, 3, ""),
    orders: jspb.Message.getFieldWithDefault(msg, 4, 0),
    score: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.SurveyChoice}
 */
proto.survey.v1.SurveyChoice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.SurveyChoice;
  return proto.survey.v1.SurveyChoice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.SurveyChoice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.SurveyChoice}
 */
proto.survey.v1.SurveyChoice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSurveyQuestionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChoice(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrders(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.SurveyChoice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.SurveyChoice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.SurveyChoice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyChoice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSurveyQuestionId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getChoice();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOrders();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.survey.v1.SurveyChoice.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.v1.SurveyChoice} returns this
 */
proto.survey.v1.SurveyChoice.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 survey_question_id = 2;
 * @return {number}
 */
proto.survey.v1.SurveyChoice.prototype.getSurveyQuestionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.v1.SurveyChoice} returns this
 */
proto.survey.v1.SurveyChoice.prototype.setSurveyQuestionId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string choice = 3;
 * @return {string}
 */
proto.survey.v1.SurveyChoice.prototype.getChoice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.survey.v1.SurveyChoice} returns this
 */
proto.survey.v1.SurveyChoice.prototype.setChoice = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 orders = 4;
 * @return {number}
 */
proto.survey.v1.SurveyChoice.prototype.getOrders = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.v1.SurveyChoice} returns this
 */
proto.survey.v1.SurveyChoice.prototype.setOrders = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 score = 5;
 * @return {number}
 */
proto.survey.v1.SurveyChoice.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.v1.SurveyChoice} returns this
 */
proto.survey.v1.SurveyChoice.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.SurveyChoiceCreateUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.SurveyChoiceCreateUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.SurveyChoiceCreateUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyChoiceCreateUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    surveyQuestionId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    choice: jspb.Message.getFieldWithDefault(msg, 3, ""),
    orders: jspb.Message.getFieldWithDefault(msg, 4, 0),
    score: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.SurveyChoiceCreateUpdate}
 */
proto.survey.v1.SurveyChoiceCreateUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.SurveyChoiceCreateUpdate;
  return proto.survey.v1.SurveyChoiceCreateUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.SurveyChoiceCreateUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.SurveyChoiceCreateUpdate}
 */
proto.survey.v1.SurveyChoiceCreateUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSurveyQuestionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChoice(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrders(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.SurveyChoiceCreateUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.SurveyChoiceCreateUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.SurveyChoiceCreateUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyChoiceCreateUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSurveyQuestionId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getChoice();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOrders();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 survey_question_id = 2;
 * @return {number}
 */
proto.survey.v1.SurveyChoiceCreateUpdate.prototype.getSurveyQuestionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.v1.SurveyChoiceCreateUpdate} returns this
 */
proto.survey.v1.SurveyChoiceCreateUpdate.prototype.setSurveyQuestionId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string choice = 3;
 * @return {string}
 */
proto.survey.v1.SurveyChoiceCreateUpdate.prototype.getChoice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.survey.v1.SurveyChoiceCreateUpdate} returns this
 */
proto.survey.v1.SurveyChoiceCreateUpdate.prototype.setChoice = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 orders = 4;
 * @return {number}
 */
proto.survey.v1.SurveyChoiceCreateUpdate.prototype.getOrders = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.v1.SurveyChoiceCreateUpdate} returns this
 */
proto.survey.v1.SurveyChoiceCreateUpdate.prototype.setOrders = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 score = 5;
 * @return {number}
 */
proto.survey.v1.SurveyChoiceCreateUpdate.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.v1.SurveyChoiceCreateUpdate} returns this
 */
proto.survey.v1.SurveyChoiceCreateUpdate.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.SurveyChoiceOption.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.SurveyChoiceOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.SurveyChoiceOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyChoiceOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    isRandom: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    mode: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.SurveyChoiceOption}
 */
proto.survey.v1.SurveyChoiceOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.SurveyChoiceOption;
  return proto.survey.v1.SurveyChoiceOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.SurveyChoiceOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.SurveyChoiceOption}
 */
proto.survey.v1.SurveyChoiceOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsRandom(value);
      break;
    case 2:
      var value = /** @type {!proto.survey.v1.SurveyChoiceOptionMode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.SurveyChoiceOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.SurveyChoiceOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.SurveyChoiceOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyChoiceOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsRandom();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional bool is_random = 1;
 * @return {boolean}
 */
proto.survey.v1.SurveyChoiceOption.prototype.getIsRandom = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.survey.v1.SurveyChoiceOption} returns this
 */
proto.survey.v1.SurveyChoiceOption.prototype.setIsRandom = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional SurveyChoiceOptionMode mode = 2;
 * @return {!proto.survey.v1.SurveyChoiceOptionMode}
 */
proto.survey.v1.SurveyChoiceOption.prototype.getMode = function() {
  return /** @type {!proto.survey.v1.SurveyChoiceOptionMode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.survey.v1.SurveyChoiceOptionMode} value
 * @return {!proto.survey.v1.SurveyChoiceOption} returns this
 */
proto.survey.v1.SurveyChoiceOption.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.ChoiceGetAllRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.ChoiceGetAllRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.ChoiceGetAllRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.ChoiceGetAllRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    questionId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.ChoiceGetAllRequest}
 */
proto.survey.v1.ChoiceGetAllRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.ChoiceGetAllRequest;
  return proto.survey.v1.ChoiceGetAllRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.ChoiceGetAllRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.ChoiceGetAllRequest}
 */
proto.survey.v1.ChoiceGetAllRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQuestionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.ChoiceGetAllRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.ChoiceGetAllRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.ChoiceGetAllRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.ChoiceGetAllRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuestionId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 question_id = 1;
 * @return {number}
 */
proto.survey.v1.ChoiceGetAllRequest.prototype.getQuestionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.v1.ChoiceGetAllRequest} returns this
 */
proto.survey.v1.ChoiceGetAllRequest.prototype.setQuestionId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.survey.v1.ChoiceGetAllResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.ChoiceGetAllResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.ChoiceGetAllResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.ChoiceGetAllResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.ChoiceGetAllResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    choicesList: jspb.Message.toObjectList(msg.getChoicesList(),
    proto.survey.v1.SurveyChoice.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.ChoiceGetAllResponse}
 */
proto.survey.v1.ChoiceGetAllResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.ChoiceGetAllResponse;
  return proto.survey.v1.ChoiceGetAllResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.ChoiceGetAllResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.ChoiceGetAllResponse}
 */
proto.survey.v1.ChoiceGetAllResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.survey.v1.SurveyChoice;
      reader.readMessage(value,proto.survey.v1.SurveyChoice.deserializeBinaryFromReader);
      msg.addChoices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.ChoiceGetAllResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.ChoiceGetAllResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.ChoiceGetAllResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.ChoiceGetAllResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChoicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.survey.v1.SurveyChoice.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SurveyChoice choices = 1;
 * @return {!Array<!proto.survey.v1.SurveyChoice>}
 */
proto.survey.v1.ChoiceGetAllResponse.prototype.getChoicesList = function() {
  return /** @type{!Array<!proto.survey.v1.SurveyChoice>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.survey.v1.SurveyChoice, 1));
};


/**
 * @param {!Array<!proto.survey.v1.SurveyChoice>} value
 * @return {!proto.survey.v1.ChoiceGetAllResponse} returns this
*/
proto.survey.v1.ChoiceGetAllResponse.prototype.setChoicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.survey.v1.SurveyChoice=} opt_value
 * @param {number=} opt_index
 * @return {!proto.survey.v1.SurveyChoice}
 */
proto.survey.v1.ChoiceGetAllResponse.prototype.addChoices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.survey.v1.SurveyChoice, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.survey.v1.ChoiceGetAllResponse} returns this
 */
proto.survey.v1.ChoiceGetAllResponse.prototype.clearChoicesList = function() {
  return this.setChoicesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.ChoiceCreateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.ChoiceCreateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.ChoiceCreateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.ChoiceCreateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    choice: (f = msg.getChoice()) && proto.survey.v1.SurveyChoiceCreateUpdate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.ChoiceCreateRequest}
 */
proto.survey.v1.ChoiceCreateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.ChoiceCreateRequest;
  return proto.survey.v1.ChoiceCreateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.ChoiceCreateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.ChoiceCreateRequest}
 */
proto.survey.v1.ChoiceCreateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.survey.v1.SurveyChoiceCreateUpdate;
      reader.readMessage(value,proto.survey.v1.SurveyChoiceCreateUpdate.deserializeBinaryFromReader);
      msg.setChoice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.ChoiceCreateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.ChoiceCreateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.ChoiceCreateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.ChoiceCreateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChoice();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.survey.v1.SurveyChoiceCreateUpdate.serializeBinaryToWriter
    );
  }
};


/**
 * optional SurveyChoiceCreateUpdate choice = 1;
 * @return {?proto.survey.v1.SurveyChoiceCreateUpdate}
 */
proto.survey.v1.ChoiceCreateRequest.prototype.getChoice = function() {
  return /** @type{?proto.survey.v1.SurveyChoiceCreateUpdate} */ (
    jspb.Message.getWrapperField(this, proto.survey.v1.SurveyChoiceCreateUpdate, 1));
};


/**
 * @param {?proto.survey.v1.SurveyChoiceCreateUpdate|undefined} value
 * @return {!proto.survey.v1.ChoiceCreateRequest} returns this
*/
proto.survey.v1.ChoiceCreateRequest.prototype.setChoice = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.survey.v1.ChoiceCreateRequest} returns this
 */
proto.survey.v1.ChoiceCreateRequest.prototype.clearChoice = function() {
  return this.setChoice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.survey.v1.ChoiceCreateRequest.prototype.hasChoice = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.ChoiceCreateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.ChoiceCreateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.ChoiceCreateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.ChoiceCreateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    choice: (f = msg.getChoice()) && proto.survey.v1.SurveyChoice.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.ChoiceCreateResponse}
 */
proto.survey.v1.ChoiceCreateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.ChoiceCreateResponse;
  return proto.survey.v1.ChoiceCreateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.ChoiceCreateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.ChoiceCreateResponse}
 */
proto.survey.v1.ChoiceCreateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.survey.v1.SurveyChoice;
      reader.readMessage(value,proto.survey.v1.SurveyChoice.deserializeBinaryFromReader);
      msg.setChoice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.ChoiceCreateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.ChoiceCreateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.ChoiceCreateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.ChoiceCreateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChoice();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.survey.v1.SurveyChoice.serializeBinaryToWriter
    );
  }
};


/**
 * optional SurveyChoice choice = 1;
 * @return {?proto.survey.v1.SurveyChoice}
 */
proto.survey.v1.ChoiceCreateResponse.prototype.getChoice = function() {
  return /** @type{?proto.survey.v1.SurveyChoice} */ (
    jspb.Message.getWrapperField(this, proto.survey.v1.SurveyChoice, 1));
};


/**
 * @param {?proto.survey.v1.SurveyChoice|undefined} value
 * @return {!proto.survey.v1.ChoiceCreateResponse} returns this
*/
proto.survey.v1.ChoiceCreateResponse.prototype.setChoice = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.survey.v1.ChoiceCreateResponse} returns this
 */
proto.survey.v1.ChoiceCreateResponse.prototype.clearChoice = function() {
  return this.setChoice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.survey.v1.ChoiceCreateResponse.prototype.hasChoice = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.ChoiceUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.ChoiceUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.ChoiceUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.ChoiceUpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    choice: (f = msg.getChoice()) && proto.survey.v1.SurveyChoiceCreateUpdate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.ChoiceUpdateRequest}
 */
proto.survey.v1.ChoiceUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.ChoiceUpdateRequest;
  return proto.survey.v1.ChoiceUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.ChoiceUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.ChoiceUpdateRequest}
 */
proto.survey.v1.ChoiceUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.survey.v1.SurveyChoiceCreateUpdate;
      reader.readMessage(value,proto.survey.v1.SurveyChoiceCreateUpdate.deserializeBinaryFromReader);
      msg.setChoice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.ChoiceUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.ChoiceUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.ChoiceUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.ChoiceUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getChoice();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.survey.v1.SurveyChoiceCreateUpdate.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.survey.v1.ChoiceUpdateRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.v1.ChoiceUpdateRequest} returns this
 */
proto.survey.v1.ChoiceUpdateRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional SurveyChoiceCreateUpdate choice = 2;
 * @return {?proto.survey.v1.SurveyChoiceCreateUpdate}
 */
proto.survey.v1.ChoiceUpdateRequest.prototype.getChoice = function() {
  return /** @type{?proto.survey.v1.SurveyChoiceCreateUpdate} */ (
    jspb.Message.getWrapperField(this, proto.survey.v1.SurveyChoiceCreateUpdate, 2));
};


/**
 * @param {?proto.survey.v1.SurveyChoiceCreateUpdate|undefined} value
 * @return {!proto.survey.v1.ChoiceUpdateRequest} returns this
*/
proto.survey.v1.ChoiceUpdateRequest.prototype.setChoice = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.survey.v1.ChoiceUpdateRequest} returns this
 */
proto.survey.v1.ChoiceUpdateRequest.prototype.clearChoice = function() {
  return this.setChoice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.survey.v1.ChoiceUpdateRequest.prototype.hasChoice = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.ChoiceUpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.ChoiceUpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.ChoiceUpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.ChoiceUpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    choice: (f = msg.getChoice()) && proto.survey.v1.SurveyChoice.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.ChoiceUpdateResponse}
 */
proto.survey.v1.ChoiceUpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.ChoiceUpdateResponse;
  return proto.survey.v1.ChoiceUpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.ChoiceUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.ChoiceUpdateResponse}
 */
proto.survey.v1.ChoiceUpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.survey.v1.SurveyChoice;
      reader.readMessage(value,proto.survey.v1.SurveyChoice.deserializeBinaryFromReader);
      msg.setChoice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.ChoiceUpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.ChoiceUpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.ChoiceUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.ChoiceUpdateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChoice();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.survey.v1.SurveyChoice.serializeBinaryToWriter
    );
  }
};


/**
 * optional SurveyChoice choice = 1;
 * @return {?proto.survey.v1.SurveyChoice}
 */
proto.survey.v1.ChoiceUpdateResponse.prototype.getChoice = function() {
  return /** @type{?proto.survey.v1.SurveyChoice} */ (
    jspb.Message.getWrapperField(this, proto.survey.v1.SurveyChoice, 1));
};


/**
 * @param {?proto.survey.v1.SurveyChoice|undefined} value
 * @return {!proto.survey.v1.ChoiceUpdateResponse} returns this
*/
proto.survey.v1.ChoiceUpdateResponse.prototype.setChoice = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.survey.v1.ChoiceUpdateResponse} returns this
 */
proto.survey.v1.ChoiceUpdateResponse.prototype.clearChoice = function() {
  return this.setChoice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.survey.v1.ChoiceUpdateResponse.prototype.hasChoice = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.ChoiceDeleteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.ChoiceDeleteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.ChoiceDeleteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.ChoiceDeleteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.ChoiceDeleteRequest}
 */
proto.survey.v1.ChoiceDeleteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.ChoiceDeleteRequest;
  return proto.survey.v1.ChoiceDeleteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.ChoiceDeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.ChoiceDeleteRequest}
 */
proto.survey.v1.ChoiceDeleteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.ChoiceDeleteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.ChoiceDeleteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.ChoiceDeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.ChoiceDeleteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.survey.v1.ChoiceDeleteRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.v1.ChoiceDeleteRequest} returns this
 */
proto.survey.v1.ChoiceDeleteRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.ChoiceDeleteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.ChoiceDeleteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.ChoiceDeleteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.ChoiceDeleteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    choice: (f = msg.getChoice()) && proto.survey.v1.SurveyChoice.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.ChoiceDeleteResponse}
 */
proto.survey.v1.ChoiceDeleteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.ChoiceDeleteResponse;
  return proto.survey.v1.ChoiceDeleteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.ChoiceDeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.ChoiceDeleteResponse}
 */
proto.survey.v1.ChoiceDeleteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.survey.v1.SurveyChoice;
      reader.readMessage(value,proto.survey.v1.SurveyChoice.deserializeBinaryFromReader);
      msg.setChoice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.ChoiceDeleteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.ChoiceDeleteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.ChoiceDeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.ChoiceDeleteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChoice();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.survey.v1.SurveyChoice.serializeBinaryToWriter
    );
  }
};


/**
 * optional SurveyChoice choice = 1;
 * @return {?proto.survey.v1.SurveyChoice}
 */
proto.survey.v1.ChoiceDeleteResponse.prototype.getChoice = function() {
  return /** @type{?proto.survey.v1.SurveyChoice} */ (
    jspb.Message.getWrapperField(this, proto.survey.v1.SurveyChoice, 1));
};


/**
 * @param {?proto.survey.v1.SurveyChoice|undefined} value
 * @return {!proto.survey.v1.ChoiceDeleteResponse} returns this
*/
proto.survey.v1.ChoiceDeleteResponse.prototype.setChoice = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.survey.v1.ChoiceDeleteResponse} returns this
 */
proto.survey.v1.ChoiceDeleteResponse.prototype.clearChoice = function() {
  return this.setChoice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.survey.v1.ChoiceDeleteResponse.prototype.hasChoice = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.survey.v1.SurveyChoiceOptionMode = {
  CHOICE_MODE_FILL_UNSPECIFIED: 0,
  CHOICE_MODE_RADIO: 1,
  CHOICE_MODE_CHECKBOX: 2
};

goog.object.extend(exports, proto.survey.v1);
