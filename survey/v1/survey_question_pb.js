// source: survey/v1/survey_question.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var survey_v1_survey_choice_pb = require('../../survey/v1/survey_choice_pb.js');
goog.object.extend(proto, survey_v1_survey_choice_pb);
goog.exportSymbol('proto.survey.v1.QuestionCreateRequest', null, global);
goog.exportSymbol('proto.survey.v1.QuestionCreateResponse', null, global);
goog.exportSymbol('proto.survey.v1.QuestionDeleteRequest', null, global);
goog.exportSymbol('proto.survey.v1.QuestionDeleteResponse', null, global);
goog.exportSymbol('proto.survey.v1.QuestionGetAllRequest', null, global);
goog.exportSymbol('proto.survey.v1.QuestionGetAllResponse', null, global);
goog.exportSymbol('proto.survey.v1.QuestionGetOneRequest', null, global);
goog.exportSymbol('proto.survey.v1.QuestionGetOneResponse', null, global);
goog.exportSymbol('proto.survey.v1.QuestionUpdateRequest', null, global);
goog.exportSymbol('proto.survey.v1.QuestionUpdateResponse', null, global);
goog.exportSymbol('proto.survey.v1.SurveyQuestion', null, global);
goog.exportSymbol('proto.survey.v1.SurveyQuestionCreateUpdate', null, global);
goog.exportSymbol('proto.survey.v1.SurveyQuestionType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.SurveyQuestion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.survey.v1.SurveyQuestion.repeatedFields_, null);
};
goog.inherits(proto.survey.v1.SurveyQuestion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.SurveyQuestion.displayName = 'proto.survey.v1.SurveyQuestion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.SurveyQuestionCreateUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.SurveyQuestionCreateUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.SurveyQuestionCreateUpdate.displayName = 'proto.survey.v1.SurveyQuestionCreateUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.QuestionGetOneRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.QuestionGetOneRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.QuestionGetOneRequest.displayName = 'proto.survey.v1.QuestionGetOneRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.QuestionGetOneResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.QuestionGetOneResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.QuestionGetOneResponse.displayName = 'proto.survey.v1.QuestionGetOneResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.QuestionGetAllRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.QuestionGetAllRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.QuestionGetAllRequest.displayName = 'proto.survey.v1.QuestionGetAllRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.QuestionGetAllResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.survey.v1.QuestionGetAllResponse.repeatedFields_, null);
};
goog.inherits(proto.survey.v1.QuestionGetAllResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.QuestionGetAllResponse.displayName = 'proto.survey.v1.QuestionGetAllResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.QuestionCreateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.QuestionCreateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.QuestionCreateRequest.displayName = 'proto.survey.v1.QuestionCreateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.QuestionCreateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.QuestionCreateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.QuestionCreateResponse.displayName = 'proto.survey.v1.QuestionCreateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.QuestionUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.QuestionUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.QuestionUpdateRequest.displayName = 'proto.survey.v1.QuestionUpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.QuestionUpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.QuestionUpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.QuestionUpdateResponse.displayName = 'proto.survey.v1.QuestionUpdateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.QuestionDeleteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.QuestionDeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.QuestionDeleteRequest.displayName = 'proto.survey.v1.QuestionDeleteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.v1.QuestionDeleteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.v1.QuestionDeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.v1.QuestionDeleteResponse.displayName = 'proto.survey.v1.QuestionDeleteResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.survey.v1.SurveyQuestion.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.SurveyQuestion.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.SurveyQuestion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.SurveyQuestion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyQuestion.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    surveyPageId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    question: jspb.Message.getFieldWithDefault(msg, 3, ""),
    orders: jspb.Message.getFieldWithDefault(msg, 4, 0),
    type: jspb.Message.getFieldWithDefault(msg, 5, 0),
    choicesList: jspb.Message.toObjectList(msg.getChoicesList(),
    survey_v1_survey_choice_pb.SurveyChoice.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.SurveyQuestion}
 */
proto.survey.v1.SurveyQuestion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.SurveyQuestion;
  return proto.survey.v1.SurveyQuestion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.SurveyQuestion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.SurveyQuestion}
 */
proto.survey.v1.SurveyQuestion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSurveyPageId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuestion(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrders(value);
      break;
    case 5:
      var value = /** @type {!proto.survey.v1.SurveyQuestionType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 7:
      var value = new survey_v1_survey_choice_pb.SurveyChoice;
      reader.readMessage(value,survey_v1_survey_choice_pb.SurveyChoice.deserializeBinaryFromReader);
      msg.addChoices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.SurveyQuestion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.SurveyQuestion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.SurveyQuestion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyQuestion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSurveyPageId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getQuestion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOrders();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getChoicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      survey_v1_survey_choice_pb.SurveyChoice.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.survey.v1.SurveyQuestion.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.v1.SurveyQuestion} returns this
 */
proto.survey.v1.SurveyQuestion.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 survey_page_id = 2;
 * @return {number}
 */
proto.survey.v1.SurveyQuestion.prototype.getSurveyPageId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.v1.SurveyQuestion} returns this
 */
proto.survey.v1.SurveyQuestion.prototype.setSurveyPageId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string question = 3;
 * @return {string}
 */
proto.survey.v1.SurveyQuestion.prototype.getQuestion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.survey.v1.SurveyQuestion} returns this
 */
proto.survey.v1.SurveyQuestion.prototype.setQuestion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 orders = 4;
 * @return {number}
 */
proto.survey.v1.SurveyQuestion.prototype.getOrders = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.v1.SurveyQuestion} returns this
 */
proto.survey.v1.SurveyQuestion.prototype.setOrders = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional SurveyQuestionType type = 5;
 * @return {!proto.survey.v1.SurveyQuestionType}
 */
proto.survey.v1.SurveyQuestion.prototype.getType = function() {
  return /** @type {!proto.survey.v1.SurveyQuestionType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.survey.v1.SurveyQuestionType} value
 * @return {!proto.survey.v1.SurveyQuestion} returns this
 */
proto.survey.v1.SurveyQuestion.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * repeated SurveyChoice choices = 7;
 * @return {!Array<!proto.survey.v1.SurveyChoice>}
 */
proto.survey.v1.SurveyQuestion.prototype.getChoicesList = function() {
  return /** @type{!Array<!proto.survey.v1.SurveyChoice>} */ (
    jspb.Message.getRepeatedWrapperField(this, survey_v1_survey_choice_pb.SurveyChoice, 7));
};


/**
 * @param {!Array<!proto.survey.v1.SurveyChoice>} value
 * @return {!proto.survey.v1.SurveyQuestion} returns this
*/
proto.survey.v1.SurveyQuestion.prototype.setChoicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.survey.v1.SurveyChoice=} opt_value
 * @param {number=} opt_index
 * @return {!proto.survey.v1.SurveyChoice}
 */
proto.survey.v1.SurveyQuestion.prototype.addChoices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.survey.v1.SurveyChoice, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.survey.v1.SurveyQuestion} returns this
 */
proto.survey.v1.SurveyQuestion.prototype.clearChoicesList = function() {
  return this.setChoicesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.SurveyQuestionCreateUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.SurveyQuestionCreateUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.SurveyQuestionCreateUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyQuestionCreateUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    question: jspb.Message.getFieldWithDefault(msg, 3, ""),
    type: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.SurveyQuestionCreateUpdate}
 */
proto.survey.v1.SurveyQuestionCreateUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.SurveyQuestionCreateUpdate;
  return proto.survey.v1.SurveyQuestionCreateUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.SurveyQuestionCreateUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.SurveyQuestionCreateUpdate}
 */
proto.survey.v1.SurveyQuestionCreateUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuestion(value);
      break;
    case 5:
      var value = /** @type {!proto.survey.v1.SurveyQuestionType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.SurveyQuestionCreateUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.SurveyQuestionCreateUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.SurveyQuestionCreateUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.SurveyQuestionCreateUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuestion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional string question = 3;
 * @return {string}
 */
proto.survey.v1.SurveyQuestionCreateUpdate.prototype.getQuestion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.survey.v1.SurveyQuestionCreateUpdate} returns this
 */
proto.survey.v1.SurveyQuestionCreateUpdate.prototype.setQuestion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional SurveyQuestionType type = 5;
 * @return {!proto.survey.v1.SurveyQuestionType}
 */
proto.survey.v1.SurveyQuestionCreateUpdate.prototype.getType = function() {
  return /** @type {!proto.survey.v1.SurveyQuestionType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.survey.v1.SurveyQuestionType} value
 * @return {!proto.survey.v1.SurveyQuestionCreateUpdate} returns this
 */
proto.survey.v1.SurveyQuestionCreateUpdate.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.QuestionGetOneRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.QuestionGetOneRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.QuestionGetOneRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.QuestionGetOneRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    withOption: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    withChoice: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.QuestionGetOneRequest}
 */
proto.survey.v1.QuestionGetOneRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.QuestionGetOneRequest;
  return proto.survey.v1.QuestionGetOneRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.QuestionGetOneRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.QuestionGetOneRequest}
 */
proto.survey.v1.QuestionGetOneRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithOption(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithChoice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.QuestionGetOneRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.QuestionGetOneRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.QuestionGetOneRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.QuestionGetOneRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getWithOption();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getWithChoice();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.survey.v1.QuestionGetOneRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.v1.QuestionGetOneRequest} returns this
 */
proto.survey.v1.QuestionGetOneRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool with_option = 2;
 * @return {boolean}
 */
proto.survey.v1.QuestionGetOneRequest.prototype.getWithOption = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.survey.v1.QuestionGetOneRequest} returns this
 */
proto.survey.v1.QuestionGetOneRequest.prototype.setWithOption = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool with_choice = 3;
 * @return {boolean}
 */
proto.survey.v1.QuestionGetOneRequest.prototype.getWithChoice = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.survey.v1.QuestionGetOneRequest} returns this
 */
proto.survey.v1.QuestionGetOneRequest.prototype.setWithChoice = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.QuestionGetOneResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.QuestionGetOneResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.QuestionGetOneResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.QuestionGetOneResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    question: (f = msg.getQuestion()) && proto.survey.v1.SurveyQuestion.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.QuestionGetOneResponse}
 */
proto.survey.v1.QuestionGetOneResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.QuestionGetOneResponse;
  return proto.survey.v1.QuestionGetOneResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.QuestionGetOneResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.QuestionGetOneResponse}
 */
proto.survey.v1.QuestionGetOneResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.survey.v1.SurveyQuestion;
      reader.readMessage(value,proto.survey.v1.SurveyQuestion.deserializeBinaryFromReader);
      msg.setQuestion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.QuestionGetOneResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.QuestionGetOneResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.QuestionGetOneResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.QuestionGetOneResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuestion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.survey.v1.SurveyQuestion.serializeBinaryToWriter
    );
  }
};


/**
 * optional SurveyQuestion question = 1;
 * @return {?proto.survey.v1.SurveyQuestion}
 */
proto.survey.v1.QuestionGetOneResponse.prototype.getQuestion = function() {
  return /** @type{?proto.survey.v1.SurveyQuestion} */ (
    jspb.Message.getWrapperField(this, proto.survey.v1.SurveyQuestion, 1));
};


/**
 * @param {?proto.survey.v1.SurveyQuestion|undefined} value
 * @return {!proto.survey.v1.QuestionGetOneResponse} returns this
*/
proto.survey.v1.QuestionGetOneResponse.prototype.setQuestion = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.survey.v1.QuestionGetOneResponse} returns this
 */
proto.survey.v1.QuestionGetOneResponse.prototype.clearQuestion = function() {
  return this.setQuestion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.survey.v1.QuestionGetOneResponse.prototype.hasQuestion = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.QuestionGetAllRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.QuestionGetAllRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.QuestionGetAllRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.QuestionGetAllRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    withOption: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    withChoice: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.QuestionGetAllRequest}
 */
proto.survey.v1.QuestionGetAllRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.QuestionGetAllRequest;
  return proto.survey.v1.QuestionGetAllRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.QuestionGetAllRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.QuestionGetAllRequest}
 */
proto.survey.v1.QuestionGetAllRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithOption(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithChoice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.QuestionGetAllRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.QuestionGetAllRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.QuestionGetAllRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.QuestionGetAllRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getWithOption();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getWithChoice();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int32 page_id = 1;
 * @return {number}
 */
proto.survey.v1.QuestionGetAllRequest.prototype.getPageId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.v1.QuestionGetAllRequest} returns this
 */
proto.survey.v1.QuestionGetAllRequest.prototype.setPageId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool with_option = 2;
 * @return {boolean}
 */
proto.survey.v1.QuestionGetAllRequest.prototype.getWithOption = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.survey.v1.QuestionGetAllRequest} returns this
 */
proto.survey.v1.QuestionGetAllRequest.prototype.setWithOption = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool with_choice = 3;
 * @return {boolean}
 */
proto.survey.v1.QuestionGetAllRequest.prototype.getWithChoice = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.survey.v1.QuestionGetAllRequest} returns this
 */
proto.survey.v1.QuestionGetAllRequest.prototype.setWithChoice = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.survey.v1.QuestionGetAllResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.QuestionGetAllResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.QuestionGetAllResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.QuestionGetAllResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.QuestionGetAllResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    questionsList: jspb.Message.toObjectList(msg.getQuestionsList(),
    proto.survey.v1.SurveyQuestion.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.QuestionGetAllResponse}
 */
proto.survey.v1.QuestionGetAllResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.QuestionGetAllResponse;
  return proto.survey.v1.QuestionGetAllResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.QuestionGetAllResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.QuestionGetAllResponse}
 */
proto.survey.v1.QuestionGetAllResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.survey.v1.SurveyQuestion;
      reader.readMessage(value,proto.survey.v1.SurveyQuestion.deserializeBinaryFromReader);
      msg.addQuestions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.QuestionGetAllResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.QuestionGetAllResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.QuestionGetAllResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.QuestionGetAllResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuestionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.survey.v1.SurveyQuestion.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SurveyQuestion questions = 1;
 * @return {!Array<!proto.survey.v1.SurveyQuestion>}
 */
proto.survey.v1.QuestionGetAllResponse.prototype.getQuestionsList = function() {
  return /** @type{!Array<!proto.survey.v1.SurveyQuestion>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.survey.v1.SurveyQuestion, 1));
};


/**
 * @param {!Array<!proto.survey.v1.SurveyQuestion>} value
 * @return {!proto.survey.v1.QuestionGetAllResponse} returns this
*/
proto.survey.v1.QuestionGetAllResponse.prototype.setQuestionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.survey.v1.SurveyQuestion=} opt_value
 * @param {number=} opt_index
 * @return {!proto.survey.v1.SurveyQuestion}
 */
proto.survey.v1.QuestionGetAllResponse.prototype.addQuestions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.survey.v1.SurveyQuestion, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.survey.v1.QuestionGetAllResponse} returns this
 */
proto.survey.v1.QuestionGetAllResponse.prototype.clearQuestionsList = function() {
  return this.setQuestionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.QuestionCreateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.QuestionCreateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.QuestionCreateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.QuestionCreateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    surveyPageId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    question: (f = msg.getQuestion()) && proto.survey.v1.SurveyQuestionCreateUpdate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.QuestionCreateRequest}
 */
proto.survey.v1.QuestionCreateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.QuestionCreateRequest;
  return proto.survey.v1.QuestionCreateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.QuestionCreateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.QuestionCreateRequest}
 */
proto.survey.v1.QuestionCreateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSurveyPageId(value);
      break;
    case 2:
      var value = new proto.survey.v1.SurveyQuestionCreateUpdate;
      reader.readMessage(value,proto.survey.v1.SurveyQuestionCreateUpdate.deserializeBinaryFromReader);
      msg.setQuestion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.QuestionCreateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.QuestionCreateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.QuestionCreateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.QuestionCreateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSurveyPageId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getQuestion();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.survey.v1.SurveyQuestionCreateUpdate.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 survey_page_id = 1;
 * @return {number}
 */
proto.survey.v1.QuestionCreateRequest.prototype.getSurveyPageId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.v1.QuestionCreateRequest} returns this
 */
proto.survey.v1.QuestionCreateRequest.prototype.setSurveyPageId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional SurveyQuestionCreateUpdate question = 2;
 * @return {?proto.survey.v1.SurveyQuestionCreateUpdate}
 */
proto.survey.v1.QuestionCreateRequest.prototype.getQuestion = function() {
  return /** @type{?proto.survey.v1.SurveyQuestionCreateUpdate} */ (
    jspb.Message.getWrapperField(this, proto.survey.v1.SurveyQuestionCreateUpdate, 2));
};


/**
 * @param {?proto.survey.v1.SurveyQuestionCreateUpdate|undefined} value
 * @return {!proto.survey.v1.QuestionCreateRequest} returns this
*/
proto.survey.v1.QuestionCreateRequest.prototype.setQuestion = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.survey.v1.QuestionCreateRequest} returns this
 */
proto.survey.v1.QuestionCreateRequest.prototype.clearQuestion = function() {
  return this.setQuestion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.survey.v1.QuestionCreateRequest.prototype.hasQuestion = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.QuestionCreateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.QuestionCreateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.QuestionCreateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.QuestionCreateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    question: (f = msg.getQuestion()) && proto.survey.v1.SurveyQuestion.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.QuestionCreateResponse}
 */
proto.survey.v1.QuestionCreateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.QuestionCreateResponse;
  return proto.survey.v1.QuestionCreateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.QuestionCreateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.QuestionCreateResponse}
 */
proto.survey.v1.QuestionCreateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.survey.v1.SurveyQuestion;
      reader.readMessage(value,proto.survey.v1.SurveyQuestion.deserializeBinaryFromReader);
      msg.setQuestion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.QuestionCreateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.QuestionCreateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.QuestionCreateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.QuestionCreateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuestion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.survey.v1.SurveyQuestion.serializeBinaryToWriter
    );
  }
};


/**
 * optional SurveyQuestion question = 1;
 * @return {?proto.survey.v1.SurveyQuestion}
 */
proto.survey.v1.QuestionCreateResponse.prototype.getQuestion = function() {
  return /** @type{?proto.survey.v1.SurveyQuestion} */ (
    jspb.Message.getWrapperField(this, proto.survey.v1.SurveyQuestion, 1));
};


/**
 * @param {?proto.survey.v1.SurveyQuestion|undefined} value
 * @return {!proto.survey.v1.QuestionCreateResponse} returns this
*/
proto.survey.v1.QuestionCreateResponse.prototype.setQuestion = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.survey.v1.QuestionCreateResponse} returns this
 */
proto.survey.v1.QuestionCreateResponse.prototype.clearQuestion = function() {
  return this.setQuestion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.survey.v1.QuestionCreateResponse.prototype.hasQuestion = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.QuestionUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.QuestionUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.QuestionUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.QuestionUpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    question: (f = msg.getQuestion()) && proto.survey.v1.SurveyQuestionCreateUpdate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.QuestionUpdateRequest}
 */
proto.survey.v1.QuestionUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.QuestionUpdateRequest;
  return proto.survey.v1.QuestionUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.QuestionUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.QuestionUpdateRequest}
 */
proto.survey.v1.QuestionUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.survey.v1.SurveyQuestionCreateUpdate;
      reader.readMessage(value,proto.survey.v1.SurveyQuestionCreateUpdate.deserializeBinaryFromReader);
      msg.setQuestion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.QuestionUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.QuestionUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.QuestionUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.QuestionUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getQuestion();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.survey.v1.SurveyQuestionCreateUpdate.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.survey.v1.QuestionUpdateRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.v1.QuestionUpdateRequest} returns this
 */
proto.survey.v1.QuestionUpdateRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional SurveyQuestionCreateUpdate question = 2;
 * @return {?proto.survey.v1.SurveyQuestionCreateUpdate}
 */
proto.survey.v1.QuestionUpdateRequest.prototype.getQuestion = function() {
  return /** @type{?proto.survey.v1.SurveyQuestionCreateUpdate} */ (
    jspb.Message.getWrapperField(this, proto.survey.v1.SurveyQuestionCreateUpdate, 2));
};


/**
 * @param {?proto.survey.v1.SurveyQuestionCreateUpdate|undefined} value
 * @return {!proto.survey.v1.QuestionUpdateRequest} returns this
*/
proto.survey.v1.QuestionUpdateRequest.prototype.setQuestion = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.survey.v1.QuestionUpdateRequest} returns this
 */
proto.survey.v1.QuestionUpdateRequest.prototype.clearQuestion = function() {
  return this.setQuestion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.survey.v1.QuestionUpdateRequest.prototype.hasQuestion = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.QuestionUpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.QuestionUpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.QuestionUpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.QuestionUpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    question: (f = msg.getQuestion()) && proto.survey.v1.SurveyQuestion.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.QuestionUpdateResponse}
 */
proto.survey.v1.QuestionUpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.QuestionUpdateResponse;
  return proto.survey.v1.QuestionUpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.QuestionUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.QuestionUpdateResponse}
 */
proto.survey.v1.QuestionUpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.survey.v1.SurveyQuestion;
      reader.readMessage(value,proto.survey.v1.SurveyQuestion.deserializeBinaryFromReader);
      msg.setQuestion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.QuestionUpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.QuestionUpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.QuestionUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.QuestionUpdateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuestion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.survey.v1.SurveyQuestion.serializeBinaryToWriter
    );
  }
};


/**
 * optional SurveyQuestion question = 1;
 * @return {?proto.survey.v1.SurveyQuestion}
 */
proto.survey.v1.QuestionUpdateResponse.prototype.getQuestion = function() {
  return /** @type{?proto.survey.v1.SurveyQuestion} */ (
    jspb.Message.getWrapperField(this, proto.survey.v1.SurveyQuestion, 1));
};


/**
 * @param {?proto.survey.v1.SurveyQuestion|undefined} value
 * @return {!proto.survey.v1.QuestionUpdateResponse} returns this
*/
proto.survey.v1.QuestionUpdateResponse.prototype.setQuestion = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.survey.v1.QuestionUpdateResponse} returns this
 */
proto.survey.v1.QuestionUpdateResponse.prototype.clearQuestion = function() {
  return this.setQuestion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.survey.v1.QuestionUpdateResponse.prototype.hasQuestion = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.QuestionDeleteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.QuestionDeleteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.QuestionDeleteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.QuestionDeleteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.QuestionDeleteRequest}
 */
proto.survey.v1.QuestionDeleteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.QuestionDeleteRequest;
  return proto.survey.v1.QuestionDeleteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.QuestionDeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.QuestionDeleteRequest}
 */
proto.survey.v1.QuestionDeleteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.QuestionDeleteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.QuestionDeleteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.QuestionDeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.QuestionDeleteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.survey.v1.QuestionDeleteRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.v1.QuestionDeleteRequest} returns this
 */
proto.survey.v1.QuestionDeleteRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.v1.QuestionDeleteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.v1.QuestionDeleteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.v1.QuestionDeleteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.QuestionDeleteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    question: (f = msg.getQuestion()) && proto.survey.v1.SurveyQuestion.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.v1.QuestionDeleteResponse}
 */
proto.survey.v1.QuestionDeleteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.v1.QuestionDeleteResponse;
  return proto.survey.v1.QuestionDeleteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.v1.QuestionDeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.v1.QuestionDeleteResponse}
 */
proto.survey.v1.QuestionDeleteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.survey.v1.SurveyQuestion;
      reader.readMessage(value,proto.survey.v1.SurveyQuestion.deserializeBinaryFromReader);
      msg.setQuestion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.v1.QuestionDeleteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.v1.QuestionDeleteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.v1.QuestionDeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.v1.QuestionDeleteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuestion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.survey.v1.SurveyQuestion.serializeBinaryToWriter
    );
  }
};


/**
 * optional SurveyQuestion question = 1;
 * @return {?proto.survey.v1.SurveyQuestion}
 */
proto.survey.v1.QuestionDeleteResponse.prototype.getQuestion = function() {
  return /** @type{?proto.survey.v1.SurveyQuestion} */ (
    jspb.Message.getWrapperField(this, proto.survey.v1.SurveyQuestion, 1));
};


/**
 * @param {?proto.survey.v1.SurveyQuestion|undefined} value
 * @return {!proto.survey.v1.QuestionDeleteResponse} returns this
*/
proto.survey.v1.QuestionDeleteResponse.prototype.setQuestion = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.survey.v1.QuestionDeleteResponse} returns this
 */
proto.survey.v1.QuestionDeleteResponse.prototype.clearQuestion = function() {
  return this.setQuestion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.survey.v1.QuestionDeleteResponse.prototype.hasQuestion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.survey.v1.SurveyQuestionType = {
  QUESTION_MODE_TEXT_UNSPECIFIED: 0,
  QUESTION_MODE_TEXTFIELD: 1,
  QUESTION_MODE_RADIO: 2,
  QUESTION_MODE_CHECKBOX: 3,
  QUESTION_MODE_DATE: 4,
  QUESTION_MODE_WEBHOOK: 5,
  QUESTION_MODE_RATING: 6,
  QUESTION_MODE_TIME: 7,
  QUESTION_MODE_DATETIME: 8,
  QUESTION_MODE_UPLOAD: 9,
  QUESTION_MODE_PARAGRAPH: 10,
  QUESTION_MODE_REDIRECT: 11
};

goog.object.extend(exports, proto.survey.v1);
